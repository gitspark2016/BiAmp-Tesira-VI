/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: sparkAV
System Name: BiAmp Tesira Forte
System Number:
Programmer: Erik Allen
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY ""
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND
// #ANALOG_SERIAL_EXPAND
// #OUTPUT_SHIFT
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#define_constant _subscribe_char_pos				19

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT		device_reboot;
ANALOG_INPUT		tcp_client_status;
// STRING_INPUT
BUFFER_INPUT		biamp_rx$[500];

DIGITAL_OUTPUT		biamp_initialized, biamp_subscribed, heartbeat_offline;
// ANALOG_OUTPUT
STRING_OUTPUT		biamp_tx$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING		_will[4], _do[4], _dont[4], _wont[4], _delim[4], _negotiation_approved[50], _pgm_level[15], _heartbeat[15],
			_subscription_time[4], buffer_collect[256];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function BiAmpSubscribe()
{
	biamp_tx$ = _pgm_level + " subscribe level 1 " + _pgm_level + " " + _subscription_time + _delim;
	delay(100);
	biamp_tx$ = _heartbeat + " subscribe state 1 " + _heartbeat + _delim;
}

String_Function EmptyBufferForNegotiation()
{
	integer buffer_pop;
	string negotiate_string[256];

	do
		{
			buffer_pop = getc(biamp_rx$);

			if (chr(buffer_pop) = _do)
			{
				negotiate_string = negotiate_string + _wont;
			}
			else if (chr(buffer_pop) = _will)
			{
            	negotiate_string = negotiate_string + _dont;
			}
			else
			{
            	negotiate_string = negotiate_string + chr(buffer_pop);
			}
		} until (len(biamp_rx$) = 0);

	return(negotiate_string);
}

Function NegotiateInitialize()
{
	string temp_string[256];

	temp_string = EmptyBufferForNegotiation();

	if (FIND(_negotiation_approved, temp_string, 1))
	{
		biamp_initialized = 1;
		BiAmpSubscribe();
	}
	else
       	biamp_tx$ = temp_string + _delim;
}

Function HeartbeatWait()
{
	Wait(510, WaitHeartbeat)
		heartbeat_offline = 1;
}

STRING_Function HeartbeatMonitor(STRING heartbeat_token)
{
	IF(FIND("true", heartbeat_token, FIND(":", heartbeat_token, 1) + 1))
	{
		CancelWait(WaitHeartbeat);
		heartbeat_offline = 0;
	}
	ELSE
		HeartbeatWait();
}

Function ProgramLevelMonitor()
{
	//
}

Function SubscribeInterpreter(STRING subscribe_token)
{
	if (FIND(_heartbeat, subscribe_token, _subscribe_char_pos))
		HeartbeatMonitor(MID(subscribe_token, _subscribe_char_pos, LEN(subscribe_token)- _subscribe_char_pos));
	else if (Find(_pgm_level, subscribe_token, _subscribe_char_pos))
		ProgramLevelMonitor();
}

STRING_Function BufferParse(STRING buffer_collect)
{
	if (FIND("! \"publishToken\":", buffer_collect, 1))
	{
		SubscribeInterpreter(buffer_collect);
	}
}

STRING_Function BufferCollect()
{
	do
	{
	 	buffer_collect = buffer_collect + chr(getc(biamp_rx$));
	} until (len(biamp_rx$) = 0);

	BufferParse(buffer_collect);
	buffer_collect = "";
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH device_reboot
{
	biamp_tx$ = "DEVICE reboot\x0A";
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE biamp_rx$
{
	if(!biamp_initialized)
		NegotiateInitialize();

	if(biamp_initialized)
		BufferCollect();

}

CHANGE tcp_client_status
{
	if(tcp_client_status != 2)
	{
		biamp_initialized = 0;
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	INTEGER heartbeat_check;

	_will = "\xFB";
	_do = "\xFD";
	_dont = "\xFE";
	_wont = "\xFC";
	_delim = "\x0A";
	_negotiation_approved = "Welcome to the Tesira Text Protocol Server...";
	_subscription_time = "250";

	_pgm_level = "Level1";
	_heartbeat = "Heartbeat";

    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    WaitForInitializationComplete();

//	while(1)
//	{
  //  	heartbeat_check = heartbeat_flag;
	//	delay(550);
	//	if(heartbeat_check = heartbeat_flag)
	//		heartbeat_offline = 1;
	//	PRINT("Heartbeat Flag: %d\n", heartbeat_flag);
	//	PRINT("Heartbeat Check: %d\n", heartbeat_check);
	//}
}
