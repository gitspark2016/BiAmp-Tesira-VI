/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: sparkAV
System Name: BiAmp Tesira Forte
System Number:
Programmer: Erik Allen
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY ""
#PRINT_TO_TRACE
// #DIGITAL_EXPAND
// #ANALOG_SERIAL_EXPAND
// #OUTPUT_SHIFT
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#define_constant _subscribe_char_pos				19

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT		device_reboot;
ANALOG_INPUT		_skip_, _skip_, _skip_,_skip_, program_volume_in, _skip_, tcp_client_status;
// STRING_INPUT
BUFFER_INPUT		biamp_rx$[500];

DIGITAL_OUTPUT		biamp_initialized, biamp_subscribed, heartbeat_offline, _skip_, program_muted;
ANALOG_OUTPUT		program_volume;
STRING_OUTPUT		_skip_, _skip_, biamp_tx$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER		_pgm_level_subscribed, _pgm_state_subscribed, _heartbeat_subscribed, temp, _heartbeat_flag;
// LONG_INTEGER//
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING		_buffer_collect[500], _will[4], _do[4], _dont[4], _wont[4], _delim[4], _negotiation_approved[50], _subscribe_token[30],
			_pgm_level[15], _pgm_level_token[50], _pgm_state[15], _pgm_state_token[50], _heartbeat[15], _heartbeat_token[50],
			_subscription_time[4], _biamp_OK[10];
/*=========================================================================================*/


/*=========================================================================================*/
Function BiAmpUnsubscribe()
{
	_pgm_level_subscribed = 0;
	_pgm_state_subscribed = 0;
	_heartbeat_subscribed = 0;
	biamp_subscribed = 0;
}

Function ProgramMuteMonitor(STRING pgm_mute_token)
{
	INTEGER val_pos;
	STRING mute_status[15];
	PRINT("Program Mute\n");

	val_pos = REVERSEFIND(":", pgm_mute_token);
	mute_status = RIGHT(pgm_mute_token, (LEN(pgm_mute_token) - val_pos));

	if(FIND("true", mute_status))
		program_muted = 1;
	else if (FIND("false", mute_status))
		program_muted = 0;
}

Function ProgramLevelMonitor(STRING pgm_level_token)
{
	INTEGER val_pos;
	STRING abs_volume_level[10];
	PRINT("Program Level\n");

	val_pos = REVERSEFIND(":", pgm_level_token);
	abs_volume_level = RIGHT(pgm_level_token, (LEN(pgm_level_token)- val_pos));

	if(FIND("-", abs_volume_level))
		program_volume = -1 * ATOI(abs_volume_level);
	else
		program_volume = ATOI(abs_volume_level);
}

Function HeartbeatMonitor()
{
		WAIT(510, WaitHeartbeat)
		{
			heartbeat_offline = 1;
			HeartbeatMonitor();
		}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH device_reboot
{
	biamp_tx$ = "DEVICE reboot\x0A";
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE program_volume_in
{
 signed_integer value_in;
 value_in = program_volume_in;

 if(value_in < 0)
	biamp_tx$ = _pgm_level + " set level 1 -" + ITOA(-value_in) + " " + _delim;
 else
	biamp_tx$ = _pgm_level + " set level 1 " + ITOA(value_in) + " " + _delim;
}

THREADSAFE CHANGE biamp_rx$
{
	while(1)
	{
		if(len(biamp_rx$) > 1)
		{
			if(!biamp_initialized)
			{
				do
				{
					temp = getc(biamp_rx$);

					if(chr(temp) = _do)
						_buffer_collect = _buffer_collect + _wont;
					else if(chr(temp) = _will)
						_buffer_collect = _buffer_collect + _dont;
					else
						_buffer_collect = _buffer_collect + chr(temp);
				}until(!len(biamp_rx$));

				if(FIND("Welcome", _buffer_collect))
				{
					biamp_tx$ = _heartbeat + " subscribe state 1 " + _heartbeat + _delim;
					do
					{
						_buffer_collect = GATHER("\x0D\x0A", biamp_rx$);

					    if (FIND(_heartbeat_token, _buffer_collect))
						{
							_heartbeat_subscribed = 1;
							break;
						}
						else
						{
							delay(100);
						}
					}until(len(biamp_rx$) = 0);

					biamp_tx$ = _pgm_level + " subscribe level 1 " + _pgm_level + " " + _subscription_time + _delim;
					do
					{
						_buffer_collect = GATHER("\x0D\x0A", biamp_rx$);

					    if (FIND(_pgm_level, _buffer_collect))
						{
							_pgm_level_subscribed = 1;
							break;
						}
						else
						{
							delay(100);
						}
					}until(len(biamp_rx$) = 0);

					biamp_tx$ = _pgm_level + " subscribe mute 1 " + _pgm_state + " " + _delim;
					do
					{
						_buffer_collect = GATHER("\x0D\x0A", biamp_rx$);

					    if (FIND(_pgm_state, _buffer_collect))
						{
							_pgm_state_subscribed = 1;
							break;
						}
						else
						{
							delay(100);
						}
					}until(len(biamp_rx$) = 0);

					biamp_initialized = 1;
				}
				else if(len(_buffer_collect) > 1)
				{
					biamp_tx$ = _buffer_collect + _delim;
					_buffer_collect = "";
				}
				else
					delay(10);
			}
			else if(biamp_initialized)
			{
				_buffer_collect = GATHER("\x0D\x0A", biamp_rx$);

				if (FIND(_heartbeat, _buffer_collect, _subscribe_char_pos))
				{
						CancelWait(WaitHeartbeat);
						heartbeat_offline = 0;
						HeartbeatMonitor();
				}
				else if (FIND(_pgm_state, _buffer_collect, _subscribe_char_pos))
					ProgramMuteMonitor(_buffer_collect);
				else if (FIND(_pgm_level, _buffer_collect, _subscribe_char_pos))
					ProgramLevelMonitor(_buffer_collect);
				else
				{
					//
				}
			}
			else
			{
				//
			}
		}
		else
		{
			//
		}
	}
}

CHANGE tcp_client_status
{
	if(tcp_client_status != 2)
	{
		biamp_initialized = 0;
		BiampUnsubscribe();
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{

	_will = "\xFB";
	_do = "\xFD";
	_dont = "\xFE";
	_wont = "\xFC";
	_delim = "\x0A";
	_negotiation_approved = "Welcome to the Tesira Text Protocol Server...";
	_subscription_time = "250";


	_subscribe_token = "! \"publishToken\":\"";
	_pgm_level = "Level1";
	_pgm_level_token = _subscribe_token + _pgm_level;
	_pgm_state = "Level1Mute";
	_pgm_state_token = _subscribe_token + _pgm_state;
	_heartbeat = "Heartbeat";
	_heartbeat_token= _subscribe_token + _heartbeat;
	_biamp_ok = "+OK\x0D\x0A";

	heartbeat_offline = 1;
	_heartbeat_flag = 1;

    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    WaitForInitializationComplete();
    HeartbeatMonitor();

//	while(1)
//	{
  //  	heartbeat_check = heartbeat_flag;
	//	delay(550);
	//	if(heartbeat_check = heartbeat_flag)
	//		heartbeat_offline = 1;
	//	PRINT("Heartbeat Flag: %d\n", heartbeat_flag);
	//	PRINT("Heartbeat Check: %d\n", heartbeat_check);
	//}
}
